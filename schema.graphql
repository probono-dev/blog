# source: http://localhost:8000/___graphql
# timestamp: Mon Mar 11 2019 19:35:05 GMT+0100 (Central European Standard Time)

type context {
  slug: String
  previous: previous
  next: next
}

"""
A date string, such as 2007-12-03, compliant with the ISO 8601 standard  for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

type dependencies_2 {
  name: String
  version: String
}

type devDependencies_2 {
  name: String
  version: String
}

"""Node of type Directory"""
type Directory implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
  internal: internal_10
  sourceInstanceName: String
  absolutePath: String
  relativePath: String
  extension: String
  size: Int
  prettySize: String
  modifiedTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  accessTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  changeTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  birthTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  root: String
  dir: String
  base: String
  ext: String
  name: String
  relativeDirectory: String
  dev: Int
  mode: Int
  nlink: Int
  uid: Int
  gid: Int
  rdev: Int
  blksize: Int
  ino: Float
  blocks: Int
  atimeMs: Float
  mtimeMs: Float
  ctimeMs: Float
  birthtimeMs: Float
  atime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  mtime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  ctime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  birthtime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
}

input directoryAbsolutePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryAccessTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryAtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input directoryAtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryBaseQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryBirthtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input directoryBirthtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryBirthTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryBlksizeQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryBlocksQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryChangeTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

"""A connection to a list of items."""
type DirectoryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DirectoryEdge]
  totalCount: Int
  distinct(field: directoryDistinctEnum): [String]
  group(skip: Int, limit: Int, field: directoryGroupEnum): [directoryGroupConnectionConnection]
}

input directoryConnectionAbsolutePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionAccessTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionAtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input directoryConnectionAtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionBaseQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionBirthtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input directoryConnectionBirthtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionBirthTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionBlksizeQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryConnectionBlocksQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryConnectionChangeTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionCtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input directoryConnectionCtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionDevQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryConnectionDirQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionExtensionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionExtQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionGidQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryConnectionIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionInoQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input directoryConnectionInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionInternalDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionInternalInputObject_2 {
  contentDigest: directoryConnectionInternalContentDigestQueryString_2
  type: directoryConnectionInternalTypeQueryString_2
  description: directoryConnectionInternalDescriptionQueryString_2
  owner: directoryConnectionInternalOwnerQueryString_2
}

input directoryConnectionInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionModeQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryConnectionModifiedTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionMtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input directoryConnectionMtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionNlinkQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryConnectionPrettySizeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionRdevQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryConnectionRelativeDirectoryQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionRelativePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionRootQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionSizeQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryConnectionSort {
  fields: [DirectoryConnectionSortByFieldsEnum]!
  order: [directoryConnectionSortOrderValues] = [ASC]
}

enum DirectoryConnectionSortByFieldsEnum {
  id
  internal___contentDigest
  internal___type
  internal___description
  internal___owner
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
}

enum directoryConnectionSortOrderValues {
  ASC
  DESC
}

input directoryConnectionSourceInstanceNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryConnectionUidQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryCtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input directoryCtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryDevQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryDirQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

enum directoryDistinctEnum {
  id
  internal___contentDigest
  internal___type
  internal___description
  internal___owner
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
}

"""An edge in a connection."""
type DirectoryEdge {
  """The item at the end of the edge"""
  node: Directory

  """The next edge in the connection"""
  next: Directory

  """The previous edge in the connection"""
  previous: Directory
}

input directoryExtensionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryExtQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryGidQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

"""A connection to a list of items."""
type directoryGroupConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [directoryGroupConnectionEdge]
  field: String
  fieldValue: String
  totalCount: Int
}

"""An edge in a connection."""
type directoryGroupConnectionEdge {
  """The item at the end of the edge"""
  node: Directory

  """The next edge in the connection"""
  next: Directory

  """The previous edge in the connection"""
  previous: Directory
}

enum directoryGroupEnum {
  id
  internal___contentDigest
  internal___type
  internal___description
  internal___owner
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
}

input directoryIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryInoQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input directoryInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryInternalDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryInternalInputObject_2 {
  contentDigest: directoryInternalContentDigestQueryString_2
  type: directoryInternalTypeQueryString_2
  description: directoryInternalDescriptionQueryString_2
  owner: directoryInternalOwnerQueryString_2
}

input directoryInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryModeQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryModifiedTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryMtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input directoryMtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryNlinkQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryPrettySizeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryRdevQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directoryRelativeDirectoryQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryRelativePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryRootQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directorySizeQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input directorySourceInstanceNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input directoryUidQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input DuotoneGradient {
  highlight: String
  shadow: String
  opacity: Int
}

enum ExcerptFormats {
  PLAIN
  HTML
}

input excerptQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input excerptQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

type fieldOwners_2 {
  slug: String
}

type fields_2 {
  slug: String
}

type fields_3 {
  slug: String
}

type fields_4 {
  slug: String
}

"""Node of type File"""
type File implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]

  """The child of this node of type markdownRemark"""
  childMarkdownRemark: MarkdownRemark

  """The child of this node of type imageSharp"""
  childImageSharp: ImageSharp
  internal: internal_11
  sourceInstanceName: String
  absolutePath: String
  relativePath: String
  extension: String
  size: Int
  prettySize: String
  modifiedTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  accessTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  changeTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  birthTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  root: String
  dir: String
  base: String
  ext: String
  name: String
  relativeDirectory: String
  dev: Int
  mode: Int
  nlink: Int
  uid: Int
  gid: Int
  rdev: Int
  blksize: Int
  ino: Float
  blocks: Int
  atimeMs: Float
  mtimeMs: Float
  ctimeMs: Float
  birthtimeMs: Float
  atime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  mtime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  ctime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  birthtime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date

  """Copy file to static directory and return public url to it"""
  publicURL: String
}

input fileAbsolutePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileAccessTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileAtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fileAtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileBaseQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileBirthtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fileBirthtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileBirthTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileBlksizeQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileBlocksQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileChangeTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]
  totalCount: Int
  distinct(field: fileDistinctEnum): [String]
  group(skip: Int, limit: Int, field: fileGroupEnum): [fileGroupConnectionConnection]
}

input fileConnectionAbsolutePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionAccessTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionAtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fileConnectionAtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionBaseQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionBirthtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fileConnectionBirthtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionBirthTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionBlksizeQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileConnectionBlocksQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileConnectionChangeTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionCtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fileConnectionCtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionDevQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileConnectionDirQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionExtensionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionExtQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionGidQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileConnectionIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionInoQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fileConnectionInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionInternalDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionInternalInputObject_2 {
  contentDigest: fileConnectionInternalContentDigestQueryString_2
  type: fileConnectionInternalTypeQueryString_2
  mediaType: fileConnectionInternalMediaTypeQueryString_2
  description: fileConnectionInternalDescriptionQueryString_2
  owner: fileConnectionInternalOwnerQueryString_2
}

input fileConnectionInternalMediaTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionModeQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileConnectionModifiedTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionMtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fileConnectionMtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionNlinkQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileConnectionPrettySizeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionRdevQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileConnectionRelativeDirectoryQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionRelativePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionRootQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionSizeQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileConnectionSort {
  fields: [FileConnectionSortByFieldsEnum]!
  order: [fileConnectionSortOrderValues] = [ASC]
}

enum FileConnectionSortByFieldsEnum {
  id
  children
  internal___contentDigest
  internal___type
  internal___mediaType
  internal___description
  internal___owner
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
  publicURL
}

enum fileConnectionSortOrderValues {
  ASC
  DESC
}

input fileConnectionSourceInstanceNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileConnectionUidQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileCtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fileCtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileDevQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileDirQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

enum fileDistinctEnum {
  id
  children
  internal___contentDigest
  internal___type
  internal___mediaType
  internal___description
  internal___owner
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge"""
  node: File

  """The next edge in the connection"""
  next: File

  """The previous edge in the connection"""
  previous: File
}

input fileExtensionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileExtQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileGidQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

"""A connection to a list of items."""
type fileGroupConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [fileGroupConnectionEdge]
  field: String
  fieldValue: String
  totalCount: Int
}

"""An edge in a connection."""
type fileGroupConnectionEdge {
  """The item at the end of the edge"""
  node: File

  """The next edge in the connection"""
  next: File

  """The previous edge in the connection"""
  previous: File
}

enum fileGroupEnum {
  id
  children
  internal___contentDigest
  internal___type
  internal___mediaType
  internal___description
  internal___owner
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  blksize
  ino
  blocks
  atimeMs
  mtimeMs
  ctimeMs
  birthtimeMs
  atime
  mtime
  ctime
  birthtime
}

input fileIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileInoQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fileInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileInternalDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileInternalInputObject_2 {
  contentDigest: fileInternalContentDigestQueryString_2
  type: fileInternalTypeQueryString_2
  mediaType: fileInternalMediaTypeQueryString_2
  description: fileInternalDescriptionQueryString_2
  owner: fileInternalOwnerQueryString_2
}

input fileInternalMediaTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileModeQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileModifiedTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileMtimeMsQueryFloat_2 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fileMtimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileNlinkQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input filePrettySizeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileRdevQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileRelativeDirectoryQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileRelativePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileRootQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileSizeQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fileSourceInstanceNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fileUidQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

"""Filter connection on its fields"""
input filterDirectory {
  id: directoryConnectionIdQueryString_2
  internal: directoryConnectionInternalInputObject_2
  sourceInstanceName: directoryConnectionSourceInstanceNameQueryString_2
  absolutePath: directoryConnectionAbsolutePathQueryString_2
  relativePath: directoryConnectionRelativePathQueryString_2
  extension: directoryConnectionExtensionQueryString_2
  size: directoryConnectionSizeQueryInteger_2
  prettySize: directoryConnectionPrettySizeQueryString_2
  modifiedTime: directoryConnectionModifiedTimeQueryString_2
  accessTime: directoryConnectionAccessTimeQueryString_2
  changeTime: directoryConnectionChangeTimeQueryString_2
  birthTime: directoryConnectionBirthTimeQueryString_2
  root: directoryConnectionRootQueryString_2
  dir: directoryConnectionDirQueryString_2
  base: directoryConnectionBaseQueryString_2
  ext: directoryConnectionExtQueryString_2
  name: directoryConnectionNameQueryString_2
  relativeDirectory: directoryConnectionRelativeDirectoryQueryString_2
  dev: directoryConnectionDevQueryInteger_2
  mode: directoryConnectionModeQueryInteger_2
  nlink: directoryConnectionNlinkQueryInteger_2
  uid: directoryConnectionUidQueryInteger_2
  gid: directoryConnectionGidQueryInteger_2
  rdev: directoryConnectionRdevQueryInteger_2
  blksize: directoryConnectionBlksizeQueryInteger_2
  ino: directoryConnectionInoQueryFloat_2
  blocks: directoryConnectionBlocksQueryInteger_2
  atimeMs: directoryConnectionAtimeMsQueryFloat_2
  mtimeMs: directoryConnectionMtimeMsQueryFloat_2
  ctimeMs: directoryConnectionCtimeMsQueryFloat_2
  birthtimeMs: directoryConnectionBirthtimeMsQueryFloat_2
  atime: directoryConnectionAtimeQueryString_2
  mtime: directoryConnectionMtimeQueryString_2
  ctime: directoryConnectionCtimeQueryString_2
  birthtime: directoryConnectionBirthtimeQueryString_2
}

"""Filter connection on its fields"""
input filterFile {
  id: fileConnectionIdQueryString_2
  internal: fileConnectionInternalInputObject_2
  sourceInstanceName: fileConnectionSourceInstanceNameQueryString_2
  absolutePath: fileConnectionAbsolutePathQueryString_2
  relativePath: fileConnectionRelativePathQueryString_2
  extension: fileConnectionExtensionQueryString_2
  size: fileConnectionSizeQueryInteger_2
  prettySize: fileConnectionPrettySizeQueryString_2
  modifiedTime: fileConnectionModifiedTimeQueryString_2
  accessTime: fileConnectionAccessTimeQueryString_2
  changeTime: fileConnectionChangeTimeQueryString_2
  birthTime: fileConnectionBirthTimeQueryString_2
  root: fileConnectionRootQueryString_2
  dir: fileConnectionDirQueryString_2
  base: fileConnectionBaseQueryString_2
  ext: fileConnectionExtQueryString_2
  name: fileConnectionNameQueryString_2
  relativeDirectory: fileConnectionRelativeDirectoryQueryString_2
  dev: fileConnectionDevQueryInteger_2
  mode: fileConnectionModeQueryInteger_2
  nlink: fileConnectionNlinkQueryInteger_2
  uid: fileConnectionUidQueryInteger_2
  gid: fileConnectionGidQueryInteger_2
  rdev: fileConnectionRdevQueryInteger_2
  blksize: fileConnectionBlksizeQueryInteger_2
  ino: fileConnectionInoQueryFloat_2
  blocks: fileConnectionBlocksQueryInteger_2
  atimeMs: fileConnectionAtimeMsQueryFloat_2
  mtimeMs: fileConnectionMtimeMsQueryFloat_2
  ctimeMs: fileConnectionCtimeMsQueryFloat_2
  birthtimeMs: fileConnectionBirthtimeMsQueryFloat_2
  atime: fileConnectionAtimeQueryString_2
  mtime: fileConnectionMtimeQueryString_2
  ctime: fileConnectionCtimeQueryString_2
  birthtime: fileConnectionBirthtimeQueryString_2
  publicURL: publicUrlQueryString_4
}

"""Filter connection on its fields"""
input filterImageSharp {
  id: imageSharpConnectionIdQueryString_2
  internal: imageSharpConnectionInternalInputObject_2
  fixed: fixedTypeName_4
  resolutions: resolutionsTypeName_4
  fluid: fluidTypeName_4
  sizes: sizesTypeName_4
  original: originalTypeName_4
  resize: resizeTypeName_4
}

"""Filter connection on its fields"""
input filterMarkdownRemark {
  id: markdownRemarkConnectionIdQueryString_2
  internal: markdownRemarkConnectionInternalInputObject_2
  frontmatter: markdownRemarkConnectionFrontmatterInputObject_2
  rawMarkdownBody: markdownRemarkConnectionRawMarkdownBodyQueryString_2
  fileAbsolutePath: markdownRemarkConnectionFileAbsolutePathQueryString_2
  fields: markdownRemarkConnectionFieldsInputObject_2
  html: htmlQueryString_4
  excerpt: excerptQueryString_4
  headings: headingsQueryList_4
  timeToRead: timeToReadQueryInt_4
  tableOfContents: tableOfContentsQueryString_4
  wordCount: wordCountTypeName_4
}

"""Filter connection on its fields"""
input filterSitePage {
  jsonName: sitePageConnectionJsonNameQueryString
  internalComponentName: sitePageConnectionInternalComponentNameQueryString
  path: sitePageConnectionPathQueryString_2
  component: sitePageConnectionComponentQueryString
  componentChunkName: sitePageConnectionComponentChunkNameQueryString
  context: sitePageConnectionContextInputObject
  pluginCreator: sitePageConnectionPluginCreatorInputObject
  pluginCreatorId: sitePageConnectionPluginCreatorIdQueryString_2
  componentPath: sitePageConnectionComponentPathQueryString
  id: sitePageConnectionIdQueryString_2
  internal: sitePageConnectionInternalInputObject_2
}

"""Filter connection on its fields"""
input filterSitePlugin {
  resolve: sitePluginConnectionResolveQueryString_2
  id: sitePluginConnectionIdQueryString_2
  name: sitePluginConnectionNameQueryString_2
  version: sitePluginConnectionVersionQueryString_2
  pluginOptions: sitePluginConnectionPluginOptionsInputObject_2
  nodeAPIs: sitePluginConnectionNodeApIsQueryList_2
  browserAPIs: sitePluginConnectionBrowserApIsQueryList_2
  ssrAPIs: sitePluginConnectionSsrApIsQueryList_2
  pluginFilepath: sitePluginConnectionPluginFilepathQueryString_2
  packageJson: sitePluginConnectionPackageJsonInputObject_2
  internal: sitePluginConnectionInternalInputObject_2
}

input fixedAspectRatioQueryFloat_3 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fixedAspectRatioQueryFloat_4 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fixedBase64QueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedBase64QueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedHeightQueryFloat_3 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fixedHeightQueryFloat_4 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fixedOriginalNameQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedOriginalNameQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedSrcQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedSrcQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedSrcSetQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedSrcSetQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedSrcSetWebpQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedSrcSetWebpQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedSrcWebpQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedSrcWebpQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedTracedSvgQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedTracedSvgQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fixedTypeName_3 {
  base64: fixedBase64QueryString_3
  tracedSVG: fixedTracedSvgQueryString_3
  aspectRatio: fixedAspectRatioQueryFloat_3
  width: fixedWidthQueryFloat_3
  height: fixedHeightQueryFloat_3
  src: fixedSrcQueryString_3
  srcSet: fixedSrcSetQueryString_3
  srcWebp: fixedSrcWebpQueryString_3
  srcSetWebp: fixedSrcSetWebpQueryString_3
  originalName: fixedOriginalNameQueryString_3
}

input fixedTypeName_4 {
  base64: fixedBase64QueryString_4
  tracedSVG: fixedTracedSvgQueryString_4
  aspectRatio: fixedAspectRatioQueryFloat_4
  width: fixedWidthQueryFloat_4
  height: fixedHeightQueryFloat_4
  src: fixedSrcQueryString_4
  srcSet: fixedSrcSetQueryString_4
  srcWebp: fixedSrcWebpQueryString_4
  srcSetWebp: fixedSrcSetWebpQueryString_4
  originalName: fixedOriginalNameQueryString_4
}

input fixedWidthQueryFloat_3 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fixedWidthQueryFloat_4 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fluidAspectRatioQueryFloat_3 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fluidAspectRatioQueryFloat_4 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input fluidBase64QueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidBase64QueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidOriginalImgQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidOriginalImgQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidOriginalNameQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidOriginalNameQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidPresentationHeightQueryInt_3 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fluidPresentationHeightQueryInt_4 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fluidPresentationWidthQueryInt_3 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fluidPresentationWidthQueryInt_4 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input fluidSizesQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidSizesQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidSrcQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidSrcQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidSrcSetQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidSrcSetQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidSrcSetWebpQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidSrcSetWebpQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidSrcWebpQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidSrcWebpQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidTracedSvgQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidTracedSvgQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input fluidTypeName_3 {
  base64: fluidBase64QueryString_3
  tracedSVG: fluidTracedSvgQueryString_3
  aspectRatio: fluidAspectRatioQueryFloat_3
  src: fluidSrcQueryString_3
  srcSet: fluidSrcSetQueryString_3
  srcWebp: fluidSrcWebpQueryString_3
  srcSetWebp: fluidSrcSetWebpQueryString_3
  sizes: fluidSizesQueryString_3
  originalImg: fluidOriginalImgQueryString_3
  originalName: fluidOriginalNameQueryString_3
  presentationWidth: fluidPresentationWidthQueryInt_3
  presentationHeight: fluidPresentationHeightQueryInt_3
}

input fluidTypeName_4 {
  base64: fluidBase64QueryString_4
  tracedSVG: fluidTracedSvgQueryString_4
  aspectRatio: fluidAspectRatioQueryFloat_4
  src: fluidSrcQueryString_4
  srcSet: fluidSrcSetQueryString_4
  srcWebp: fluidSrcWebpQueryString_4
  srcSetWebp: fluidSrcSetWebpQueryString_4
  sizes: fluidSizesQueryString_4
  originalImg: fluidOriginalImgQueryString_4
  originalName: fluidOriginalNameQueryString_4
  presentationWidth: fluidPresentationWidthQueryInt_4
  presentationHeight: fluidPresentationHeightQueryInt_4
}

type frontmatter_2 {
  title: String
}

type frontmatter_3 {
  title: String
}

type frontmatter_4 {
  title: String
  date(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  description: String
}

enum HeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

input headingsListElemDepthQueryInt_3 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input headingsListElemDepthQueryInt_4 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input headingsListElemTypeName_3 {
  value: headingsListElemValueQueryString_3
  depth: headingsListElemDepthQueryInt_3
}

input headingsListElemTypeName_4 {
  value: headingsListElemValueQueryString_4
  depth: headingsListElemDepthQueryInt_4
}

input headingsListElemValueQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input headingsListElemValueQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input headingsQueryList_3 {
  elemMatch: headingsListElemTypeName_3
}

input headingsQueryList_4 {
  elemMatch: headingsListElemTypeName_4
}

input htmlQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input htmlQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

enum ImageFormat {
  NO_CHANGE
  JPG
  PNG
  WEBP
}

"""Node of type ImageSharp"""
type ImageSharp implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
  internal: internal_13
  fixed(width: Int, height: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, toFormat: ImageFormat, cropFocus: ImageCropFocus, rotate: Int = 0): ImageSharpFixed
  resolutions(width: Int, height: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, toFormat: ImageFormat, cropFocus: ImageCropFocus, rotate: Int = 0): ImageSharpResolutions @deprecated(reason: "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https://example.com/write-docs-and-fix-this-example-link")
  fluid(
    maxWidth: Int
    maxHeight: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    toFormat: ImageFormat
    cropFocus: ImageCropFocus
    rotate: Int = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  sizes(
    maxWidth: Int
    maxHeight: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    toFormat: ImageFormat
    cropFocus: ImageCropFocus
    rotate: Int = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpSizes @deprecated(reason: "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https://example.com/write-docs-and-fix-this-example-link")
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat, cropFocus: ImageCropFocus, rotate: Int = 0): ImageSharpResize
}

"""A connection to a list of items."""
type ImageSharpConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ImageSharpEdge]
  totalCount: Int
  distinct(field: imageSharpDistinctEnum): [String]
  group(skip: Int, limit: Int, field: imageSharpGroupEnum): [imageSharpGroupConnectionConnection]
}

input imageSharpConnectionIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input imageSharpConnectionInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input imageSharpConnectionInternalInputObject_2 {
  contentDigest: imageSharpConnectionInternalContentDigestQueryString_2
  type: imageSharpConnectionInternalTypeQueryString_2
  owner: imageSharpConnectionInternalOwnerQueryString_2
}

input imageSharpConnectionInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input imageSharpConnectionInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input imageSharpConnectionSort {
  fields: [ImageSharpConnectionSortByFieldsEnum]!
  order: [imageSharpConnectionSortOrderValues] = [ASC]
}

enum ImageSharpConnectionSortByFieldsEnum {
  id
  parent
  internal___contentDigest
  internal___type
  internal___owner
  fixed___base64
  fixed___tracedSVG
  fixed___aspectRatio
  fixed___width
  fixed___height
  fixed___src
  fixed___srcSet
  fixed___srcWebp
  fixed___srcSetWebp
  fixed___originalName
  resolutions___base64
  resolutions___tracedSVG
  resolutions___aspectRatio
  resolutions___width
  resolutions___height
  resolutions___src
  resolutions___srcSet
  resolutions___srcWebp
  resolutions___srcSetWebp
  resolutions___originalName
  fluid___base64
  fluid___tracedSVG
  fluid___aspectRatio
  fluid___src
  fluid___srcSet
  fluid___srcWebp
  fluid___srcSetWebp
  fluid___sizes
  fluid___originalImg
  fluid___originalName
  fluid___presentationWidth
  fluid___presentationHeight
  sizes___base64
  sizes___tracedSVG
  sizes___aspectRatio
  sizes___src
  sizes___srcSet
  sizes___srcWebp
  sizes___srcSetWebp
  sizes___sizes
  sizes___originalImg
  sizes___originalName
  sizes___presentationWidth
  sizes___presentationHeight
  original___width
  original___height
  original___src
  resize___src
  resize___tracedSVG
  resize___width
  resize___height
  resize___aspectRatio
  resize___originalName
}

enum imageSharpConnectionSortOrderValues {
  ASC
  DESC
}

enum imageSharpDistinctEnum {
  id
  parent
  internal___contentDigest
  internal___type
  internal___owner
}

"""An edge in a connection."""
type ImageSharpEdge {
  """The item at the end of the edge"""
  node: ImageSharp

  """The next edge in the connection"""
  next: ImageSharp

  """The previous edge in the connection"""
  previous: ImageSharp
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float
  height: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  sizes: String
  originalImg: String
  originalName: String
  presentationWidth: Int
  presentationHeight: Int
}

"""A connection to a list of items."""
type imageSharpGroupConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [imageSharpGroupConnectionEdge]
  field: String
  fieldValue: String
  totalCount: Int
}

"""An edge in a connection."""
type imageSharpGroupConnectionEdge {
  """The item at the end of the edge"""
  node: ImageSharp

  """The next edge in the connection"""
  next: ImageSharp

  """The previous edge in the connection"""
  previous: ImageSharp
}

enum imageSharpGroupEnum {
  id
  parent
  internal___contentDigest
  internal___type
  internal___owner
}

input imageSharpIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input imageSharpInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input imageSharpInternalInputObject_2 {
  contentDigest: imageSharpInternalContentDigestQueryString_2
  type: imageSharpInternalTypeQueryString_2
  owner: imageSharpInternalOwnerQueryString_2
}

input imageSharpInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input imageSharpInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type ImageSharpResolutions {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float
  height: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpSizes {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  sizes: String
  originalImg: String
  originalName: String
  presentationWidth: Int
  presentationHeight: Int
}

type internal_10 {
  contentDigest: String
  type: String
  description: String
  owner: String
}

type internal_11 {
  contentDigest: String
  type: String
  mediaType: String
  description: String
  owner: String
}

type internal_12 {
  content: String
  type: String
  contentDigest: String
  owner: String
  fieldOwners: fieldOwners_2
}

type internal_13 {
  contentDigest: String
  type: String
  owner: String
}

type internal_14 {
  contentDigest: String
  type: String
  owner: String
}

type internal_8 {
  type: String
  contentDigest: String
  description: String
  owner: String
}

type internal_9 {
  contentDigest: String
  type: String
  owner: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MarkdownHeading {
  value: String
  depth: Int
}

"""Node of type MarkdownRemark"""
type MarkdownRemark implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
  internal: internal_12
  frontmatter: frontmatter_4
  rawMarkdownBody: String
  fileAbsolutePath: String
  fields: fields_4
  html: String
  htmlAst: JSON
  excerpt(pruneLength: Int = 140, truncate: Boolean = false, format: ExcerptFormats): String
  excerptAst(pruneLength: Int = 140, truncate: Boolean = false): JSON
  headings(depth: HeadingLevels): [MarkdownHeading]
  timeToRead: Int
  tableOfContents(pathToSlugField: String = "fields.slug", maxDepth: Int, heading: String): String
  wordCount: wordCount
}

"""A connection to a list of items."""
type MarkdownRemarkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MarkdownRemarkEdge]
  totalCount: Int
  distinct(field: markdownRemarkDistinctEnum): [String]
  group(skip: Int, limit: Int, field: markdownRemarkGroupEnum): [markdownRemarkGroupConnectionConnection]
}

input markdownRemarkConnectionFieldsInputObject_2 {
  slug: markdownRemarkConnectionFieldsSlugQueryString_2
}

input markdownRemarkConnectionFieldsSlugQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkConnectionFileAbsolutePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkConnectionFrontmatterDateQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkConnectionFrontmatterDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkConnectionFrontmatterInputObject_2 {
  title: markdownRemarkConnectionFrontmatterTitleQueryString_2
  date: markdownRemarkConnectionFrontmatterDateQueryString_2
  description: markdownRemarkConnectionFrontmatterDescriptionQueryString_2
}

input markdownRemarkConnectionFrontmatterTitleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkConnectionIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkConnectionInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkConnectionInternalContentQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkConnectionInternalFieldOwnersInputObject_2 {
  slug: markdownRemarkConnectionInternalFieldOwnersSlugQueryString_2
}

input markdownRemarkConnectionInternalFieldOwnersSlugQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkConnectionInternalInputObject_2 {
  content: markdownRemarkConnectionInternalContentQueryString_2
  type: markdownRemarkConnectionInternalTypeQueryString_2
  contentDigest: markdownRemarkConnectionInternalContentDigestQueryString_2
  owner: markdownRemarkConnectionInternalOwnerQueryString_2
  fieldOwners: markdownRemarkConnectionInternalFieldOwnersInputObject_2
}

input markdownRemarkConnectionInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkConnectionInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkConnectionRawMarkdownBodyQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkConnectionSort {
  fields: [MarkdownRemarkConnectionSortByFieldsEnum]!
  order: [markdownRemarkConnectionSortOrderValues] = [ASC]
}

enum MarkdownRemarkConnectionSortByFieldsEnum {
  id
  parent
  internal___content
  internal___type
  internal___contentDigest
  internal___owner
  internal___fieldOwners___slug
  frontmatter___title
  frontmatter___date
  frontmatter___description
  rawMarkdownBody
  fileAbsolutePath
  fields___slug
  html
  excerpt
  headings
  timeToRead
  tableOfContents
  wordCount___paragraphs
  wordCount___sentences
  wordCount___words
}

enum markdownRemarkConnectionSortOrderValues {
  ASC
  DESC
}

enum markdownRemarkDistinctEnum {
  id
  parent
  internal___content
  internal___type
  internal___contentDigest
  internal___owner
  internal___fieldOwners___slug
  frontmatter___title
  frontmatter___date
  frontmatter___description
  rawMarkdownBody
  fileAbsolutePath
  fields___slug
}

"""An edge in a connection."""
type MarkdownRemarkEdge {
  """The item at the end of the edge"""
  node: MarkdownRemark

  """The next edge in the connection"""
  next: MarkdownRemark

  """The previous edge in the connection"""
  previous: MarkdownRemark
}

input markdownRemarkFieldsInputObject_2 {
  slug: markdownRemarkFieldsSlugQueryString_2
}

input markdownRemarkFieldsSlugQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkFileAbsolutePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkFrontmatterDateQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkFrontmatterDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkFrontmatterInputObject_2 {
  title: markdownRemarkFrontmatterTitleQueryString_2
  date: markdownRemarkFrontmatterDateQueryString_2
  description: markdownRemarkFrontmatterDescriptionQueryString_2
}

input markdownRemarkFrontmatterTitleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

"""A connection to a list of items."""
type markdownRemarkGroupConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [markdownRemarkGroupConnectionEdge]
  field: String
  fieldValue: String
  totalCount: Int
}

"""An edge in a connection."""
type markdownRemarkGroupConnectionEdge {
  """The item at the end of the edge"""
  node: MarkdownRemark

  """The next edge in the connection"""
  next: MarkdownRemark

  """The previous edge in the connection"""
  previous: MarkdownRemark
}

enum markdownRemarkGroupEnum {
  id
  parent
  internal___content
  internal___type
  internal___contentDigest
  internal___owner
  internal___fieldOwners___slug
  frontmatter___title
  frontmatter___date
  frontmatter___description
  rawMarkdownBody
  fileAbsolutePath
  fields___slug
}

input markdownRemarkIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkInternalContentQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkInternalFieldOwnersInputObject_2 {
  slug: markdownRemarkInternalFieldOwnersSlugQueryString_2
}

input markdownRemarkInternalFieldOwnersSlugQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkInternalInputObject_2 {
  content: markdownRemarkInternalContentQueryString_2
  type: markdownRemarkInternalTypeQueryString_2
  contentDigest: markdownRemarkInternalContentDigestQueryString_2
  owner: markdownRemarkInternalOwnerQueryString_2
  fieldOwners: markdownRemarkInternalFieldOwnersInputObject_2
}

input markdownRemarkInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input markdownRemarkRawMarkdownBodyQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

type next {
  fields: fields_3
  frontmatter: frontmatter_3
}

"""An object with an id, parent, and children"""
interface Node {
  """The id of the node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
}

input originalHeightQueryFloat_3 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input originalHeightQueryFloat_4 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input originalSrcQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input originalSrcQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input originalTypeName_3 {
  width: originalWidthQueryFloat_3
  height: originalHeightQueryFloat_3
  src: originalSrcQueryString_3
}

input originalTypeName_4 {
  width: originalWidthQueryFloat_4
  height: originalHeightQueryFloat_4
  src: originalSrcQueryString_4
}

input originalWidthQueryFloat_3 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input originalWidthQueryFloat_4 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

type packageJson_2 {
  name: String
  description: String
  version: String
  main: String
  author: String
  license: String
  dependencies: [dependencies_2]
  devDependencies: [devDependencies_2]
  peerDependencies: [peerDependencies_2]
  keywords: [String]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating, are there more items?"""
  hasNextPage: Boolean!
}

type peerDependencies_2 {
  name: String
  version: String
}

type pluginOptions_3 {
  plugins: [plugins_2]
  path: String
  name: String
  maxWidth: Int
  wrapperStyle: String
  short_name: String
  start_url: String
  background_color: String
  theme_color: String
  display: String
  icon: String
  pathToConfigModule: String
  pathCheck: Boolean
}

type pluginOptions_4 {
  maxWidth: Int
  wrapperStyle: String
}

type plugins_2 {
  resolve: String
  id: String
  name: String
  version: String
  pluginOptions: pluginOptions_4
  pluginFilepath: String
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

type previous {
  fields: fields_2
  frontmatter: frontmatter_2
}

input publicUrlQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input publicUrlQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

type Query {
  """Connection to all SitePage nodes"""
  allSitePage(skip: Int, limit: Int, sort: sitePageConnectionSort, filter: filterSitePage): SitePageConnection

  """Connection to all SitePlugin nodes"""
  allSitePlugin(skip: Int, limit: Int, sort: sitePluginConnectionSort, filter: filterSitePlugin): SitePluginConnection

  """Connection to all Directory nodes"""
  allDirectory(skip: Int, limit: Int, sort: directoryConnectionSort, filter: filterDirectory): DirectoryConnection

  """Connection to all File nodes"""
  allFile(skip: Int, limit: Int, sort: fileConnectionSort, filter: filterFile): FileConnection

  """Connection to all MarkdownRemark nodes"""
  allMarkdownRemark(skip: Int, limit: Int, sort: markdownRemarkConnectionSort, filter: filterMarkdownRemark): MarkdownRemarkConnection

  """Connection to all ImageSharp nodes"""
  allImageSharp(skip: Int, limit: Int, sort: imageSharpConnectionSort, filter: filterImageSharp): ImageSharpConnection
  sitePage(jsonName: sitePageJsonNameQueryString, internalComponentName: sitePageInternalComponentNameQueryString, path: sitePagePathQueryString_2, component: sitePageComponentQueryString, componentChunkName: sitePageComponentChunkNameQueryString, context: sitePageContextInputObject, pluginCreator: sitePagePluginCreatorInputObject, pluginCreatorId: sitePagePluginCreatorIdQueryString_2, componentPath: sitePageComponentPathQueryString, id: sitePageIdQueryString_2, internal: sitePageInternalInputObject_2): SitePage
  sitePlugin(resolve: sitePluginResolveQueryString_2, id: sitePluginIdQueryString_2, name: sitePluginNameQueryString_2, version: sitePluginVersionQueryString_2, pluginOptions: sitePluginPluginOptionsInputObject_2, nodeAPIs: sitePluginNodeApIsQueryList_2, browserAPIs: sitePluginBrowserApIsQueryList_2, ssrAPIs: sitePluginSsrApIsQueryList_2, pluginFilepath: sitePluginPluginFilepathQueryString_2, packageJson: sitePluginPackageJsonInputObject_2, internal: sitePluginInternalInputObject_2): SitePlugin
  site(siteMetadata: siteSiteMetadataInputObject_2, port: sitePortQueryString_2, host: siteHostQueryString_2, pathPrefix: sitePathPrefixQueryString_2, polyfill: sitePolyfillQueryBoolean_2, buildTime: siteBuildTimeQueryString_2, id: siteIdQueryString_2, internal: siteInternalInputObject_2): Site
  directory(id: directoryIdQueryString_2, internal: directoryInternalInputObject_2, sourceInstanceName: directorySourceInstanceNameQueryString_2, absolutePath: directoryAbsolutePathQueryString_2, relativePath: directoryRelativePathQueryString_2, extension: directoryExtensionQueryString_2, size: directorySizeQueryInteger_2, prettySize: directoryPrettySizeQueryString_2, modifiedTime: directoryModifiedTimeQueryString_2, accessTime: directoryAccessTimeQueryString_2, changeTime: directoryChangeTimeQueryString_2, birthTime: directoryBirthTimeQueryString_2, root: directoryRootQueryString_2, dir: directoryDirQueryString_2, base: directoryBaseQueryString_2, ext: directoryExtQueryString_2, name: directoryNameQueryString_2, relativeDirectory: directoryRelativeDirectoryQueryString_2, dev: directoryDevQueryInteger_2, mode: directoryModeQueryInteger_2, nlink: directoryNlinkQueryInteger_2, uid: directoryUidQueryInteger_2, gid: directoryGidQueryInteger_2, rdev: directoryRdevQueryInteger_2, blksize: directoryBlksizeQueryInteger_2, ino: directoryInoQueryFloat_2, blocks: directoryBlocksQueryInteger_2, atimeMs: directoryAtimeMsQueryFloat_2, mtimeMs: directoryMtimeMsQueryFloat_2, ctimeMs: directoryCtimeMsQueryFloat_2, birthtimeMs: directoryBirthtimeMsQueryFloat_2, atime: directoryAtimeQueryString_2, mtime: directoryMtimeQueryString_2, ctime: directoryCtimeQueryString_2, birthtime: directoryBirthtimeQueryString_2): Directory
  file(id: fileIdQueryString_2, internal: fileInternalInputObject_2, sourceInstanceName: fileSourceInstanceNameQueryString_2, absolutePath: fileAbsolutePathQueryString_2, relativePath: fileRelativePathQueryString_2, extension: fileExtensionQueryString_2, size: fileSizeQueryInteger_2, prettySize: filePrettySizeQueryString_2, modifiedTime: fileModifiedTimeQueryString_2, accessTime: fileAccessTimeQueryString_2, changeTime: fileChangeTimeQueryString_2, birthTime: fileBirthTimeQueryString_2, root: fileRootQueryString_2, dir: fileDirQueryString_2, base: fileBaseQueryString_2, ext: fileExtQueryString_2, name: fileNameQueryString_2, relativeDirectory: fileRelativeDirectoryQueryString_2, dev: fileDevQueryInteger_2, mode: fileModeQueryInteger_2, nlink: fileNlinkQueryInteger_2, uid: fileUidQueryInteger_2, gid: fileGidQueryInteger_2, rdev: fileRdevQueryInteger_2, blksize: fileBlksizeQueryInteger_2, ino: fileInoQueryFloat_2, blocks: fileBlocksQueryInteger_2, atimeMs: fileAtimeMsQueryFloat_2, mtimeMs: fileMtimeMsQueryFloat_2, ctimeMs: fileCtimeMsQueryFloat_2, birthtimeMs: fileBirthtimeMsQueryFloat_2, atime: fileAtimeQueryString_2, mtime: fileMtimeQueryString_2, ctime: fileCtimeQueryString_2, birthtime: fileBirthtimeQueryString_2, publicURL: publicUrlQueryString_3): File
  markdownRemark(id: markdownRemarkIdQueryString_2, internal: markdownRemarkInternalInputObject_2, frontmatter: markdownRemarkFrontmatterInputObject_2, rawMarkdownBody: markdownRemarkRawMarkdownBodyQueryString_2, fileAbsolutePath: markdownRemarkFileAbsolutePathQueryString_2, fields: markdownRemarkFieldsInputObject_2, html: htmlQueryString_3, excerpt: excerptQueryString_3, headings: headingsQueryList_3, timeToRead: timeToReadQueryInt_3, tableOfContents: tableOfContentsQueryString_3, wordCount: wordCountTypeName_3): MarkdownRemark
  imageSharp(id: imageSharpIdQueryString_2, internal: imageSharpInternalInputObject_2, fixed: fixedTypeName_3, resolutions: resolutionsTypeName_3, fluid: fluidTypeName_3, sizes: sizesTypeName_3, original: originalTypeName_3, resize: resizeTypeName_3): ImageSharp
}

input resizeAspectRatioQueryFloat_3 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input resizeAspectRatioQueryFloat_4 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input resizeHeightQueryInt_3 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input resizeHeightQueryInt_4 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input resizeOriginalNameQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resizeOriginalNameQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resizeSrcQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resizeSrcQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resizeTracedSvgQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resizeTracedSvgQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resizeTypeName_3 {
  src: resizeSrcQueryString_3
  tracedSVG: resizeTracedSvgQueryString_3
  width: resizeWidthQueryInt_3
  height: resizeHeightQueryInt_3
  aspectRatio: resizeAspectRatioQueryFloat_3
  originalName: resizeOriginalNameQueryString_3
}

input resizeTypeName_4 {
  src: resizeSrcQueryString_4
  tracedSVG: resizeTracedSvgQueryString_4
  width: resizeWidthQueryInt_4
  height: resizeHeightQueryInt_4
  aspectRatio: resizeAspectRatioQueryFloat_4
  originalName: resizeOriginalNameQueryString_4
}

input resizeWidthQueryInt_3 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input resizeWidthQueryInt_4 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input resolutionsAspectRatioQueryFloat_3 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input resolutionsAspectRatioQueryFloat_4 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input resolutionsBase64QueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsBase64QueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsHeightQueryFloat_3 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input resolutionsHeightQueryFloat_4 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input resolutionsOriginalNameQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsOriginalNameQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsSrcQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsSrcQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsSrcSetQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsSrcSetQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsSrcSetWebpQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsSrcSetWebpQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsSrcWebpQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsSrcWebpQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsTracedSvgQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsTracedSvgQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input resolutionsTypeName_3 {
  base64: resolutionsBase64QueryString_3
  tracedSVG: resolutionsTracedSvgQueryString_3
  aspectRatio: resolutionsAspectRatioQueryFloat_3
  width: resolutionsWidthQueryFloat_3
  height: resolutionsHeightQueryFloat_3
  src: resolutionsSrcQueryString_3
  srcSet: resolutionsSrcSetQueryString_3
  srcWebp: resolutionsSrcWebpQueryString_3
  srcSetWebp: resolutionsSrcSetWebpQueryString_3
  originalName: resolutionsOriginalNameQueryString_3
}

input resolutionsTypeName_4 {
  base64: resolutionsBase64QueryString_4
  tracedSVG: resolutionsTracedSvgQueryString_4
  aspectRatio: resolutionsAspectRatioQueryFloat_4
  width: resolutionsWidthQueryFloat_4
  height: resolutionsHeightQueryFloat_4
  src: resolutionsSrcQueryString_4
  srcSet: resolutionsSrcSetQueryString_4
  srcWebp: resolutionsSrcWebpQueryString_4
  srcSetWebp: resolutionsSrcSetWebpQueryString_4
  originalName: resolutionsOriginalNameQueryString_4
}

input resolutionsWidthQueryFloat_3 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input resolutionsWidthQueryFloat_4 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

"""Node of type Site"""
type Site implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
  siteMetadata: siteMetadata_2
  port(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  host: String
  pathPrefix: String
  polyfill: Boolean
  buildTime(
    """
    Format the date using Moment.js' date tokens e.g. "date(formatString: "YYYY
    MMMM DD)" See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens
    """
    formatString: String

    """Returns a string generated with Moment.js' fromNow function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    miliseconds but you can also pass in as the measurement years, months,
    weeks, days, hours, minutes, and seconds.
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  internal: internal_14
}

input siteBuildTimeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input siteHostQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input siteIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input siteInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input siteInternalInputObject_2 {
  contentDigest: siteInternalContentDigestQueryString_2
  type: siteInternalTypeQueryString_2
  owner: siteInternalOwnerQueryString_2
}

input siteInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input siteInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

type siteMetadata_2 {
  title: String
  author: String
  description: String
  siteUrl: String
  social: social_2
}

"""Node of type SitePage"""
type SitePage implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
  jsonName: String
  internalComponentName: String
  path: String
  component: String
  componentChunkName: String
  context: context
  pluginCreator: SitePlugin
  pluginCreatorId: String
  componentPath: String
  internal: internal_8
}

input sitePageComponentChunkNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageComponentPathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageComponentQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

"""A connection to a list of items."""
type SitePageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SitePageEdge]
  totalCount: Int
  distinct(field: sitePageDistinctEnum): [String]
  group(skip: Int, limit: Int, field: sitePageGroupEnum): [sitePageGroupConnectionConnection]
}

input sitePageConnectionComponentChunkNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionComponentPathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionComponentQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionContextInputObject {
  slug: sitePageConnectionContextSlugQueryString
  previous: sitePageConnectionContextPreviousInputObject
  next: sitePageConnectionContextNextInputObject
}

input sitePageConnectionContextNextFieldsInputObject {
  slug: sitePageConnectionContextNextFieldsSlugQueryString
}

input sitePageConnectionContextNextFieldsSlugQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionContextNextFrontmatterInputObject {
  title: sitePageConnectionContextNextFrontmatterTitleQueryString
}

input sitePageConnectionContextNextFrontmatterTitleQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionContextNextInputObject {
  fields: sitePageConnectionContextNextFieldsInputObject
  frontmatter: sitePageConnectionContextNextFrontmatterInputObject
}

input sitePageConnectionContextPreviousFieldsInputObject {
  slug: sitePageConnectionContextPreviousFieldsSlugQueryString
}

input sitePageConnectionContextPreviousFieldsSlugQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionContextPreviousFrontmatterInputObject {
  title: sitePageConnectionContextPreviousFrontmatterTitleQueryString
}

input sitePageConnectionContextPreviousFrontmatterTitleQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionContextPreviousInputObject {
  fields: sitePageConnectionContextPreviousFieldsInputObject
  frontmatter: sitePageConnectionContextPreviousFrontmatterInputObject
}

input sitePageConnectionContextSlugQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionInternalComponentNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionInternalDescriptionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionInternalInputObject_2 {
  type: sitePageConnectionInternalTypeQueryString_2
  contentDigest: sitePageConnectionInternalContentDigestQueryString_2
  description: sitePageConnectionInternalDescriptionQueryString
  owner: sitePageConnectionInternalOwnerQueryString_2
}

input sitePageConnectionInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionJsonNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorBrowserApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorIdQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorInputObject {
  resolve: sitePageConnectionPluginCreatorResolveQueryString
  id: sitePageConnectionPluginCreatorIdQueryString
  name: sitePageConnectionPluginCreatorNameQueryString
  version: sitePageConnectionPluginCreatorVersionQueryString
  pluginOptions: sitePageConnectionPluginCreatorPluginOptionsInputObject
  nodeAPIs: sitePageConnectionPluginCreatorNodeApIsQueryList
  browserAPIs: sitePageConnectionPluginCreatorBrowserApIsQueryList
  ssrAPIs: sitePageConnectionPluginCreatorSsrApIsQueryList
  pluginFilepath: sitePageConnectionPluginCreatorPluginFilepathQueryString
  packageJson: sitePageConnectionPluginCreatorPackageJsonInputObject
  internal: sitePageConnectionPluginCreatorInternalInputObject
}

input sitePageConnectionPluginCreatorInternalContentDigestQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorInternalInputObject {
  contentDigest: sitePageConnectionPluginCreatorInternalContentDigestQueryString
  type: sitePageConnectionPluginCreatorInternalTypeQueryString
  owner: sitePageConnectionPluginCreatorInternalOwnerQueryString
}

input sitePageConnectionPluginCreatorInternalOwnerQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorInternalTypeQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorNodeApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPackageJsonAuthorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPackageJsonDependenciesInputObject {
  name: sitePageConnectionPluginCreatorPackageJsonDependenciesNameQueryString
  version: sitePageConnectionPluginCreatorPackageJsonDependenciesVersionQueryString
}

input sitePageConnectionPluginCreatorPackageJsonDependenciesNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPackageJsonDependenciesQueryList {
  elemMatch: sitePageConnectionPluginCreatorPackageJsonDependenciesInputObject
}

input sitePageConnectionPluginCreatorPackageJsonDependenciesVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPackageJsonDescriptionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPackageJsonDevDependenciesInputObject {
  name: sitePageConnectionPluginCreatorPackageJsonDevDependenciesNameQueryString
  version: sitePageConnectionPluginCreatorPackageJsonDevDependenciesVersionQueryString
}

input sitePageConnectionPluginCreatorPackageJsonDevDependenciesNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPackageJsonDevDependenciesQueryList {
  elemMatch: sitePageConnectionPluginCreatorPackageJsonDevDependenciesInputObject
}

input sitePageConnectionPluginCreatorPackageJsonDevDependenciesVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPackageJsonInputObject {
  name: sitePageConnectionPluginCreatorPackageJsonNameQueryString
  description: sitePageConnectionPluginCreatorPackageJsonDescriptionQueryString
  version: sitePageConnectionPluginCreatorPackageJsonVersionQueryString
  main: sitePageConnectionPluginCreatorPackageJsonMainQueryString
  author: sitePageConnectionPluginCreatorPackageJsonAuthorQueryString
  license: sitePageConnectionPluginCreatorPackageJsonLicenseQueryString
  dependencies: sitePageConnectionPluginCreatorPackageJsonDependenciesQueryList
  devDependencies: sitePageConnectionPluginCreatorPackageJsonDevDependenciesQueryList
  peerDependencies: sitePageConnectionPluginCreatorPackageJsonPeerDependenciesQueryList
  keywords: sitePageConnectionPluginCreatorPackageJsonKeywordsQueryList
}

input sitePageConnectionPluginCreatorPackageJsonKeywordsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPackageJsonLicenseQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPackageJsonMainQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPackageJsonNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPackageJsonPeerDependenciesInputObject {
  name: sitePageConnectionPluginCreatorPackageJsonPeerDependenciesNameQueryString
  version: sitePageConnectionPluginCreatorPackageJsonPeerDependenciesVersionQueryString
}

input sitePageConnectionPluginCreatorPackageJsonPeerDependenciesNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPackageJsonPeerDependenciesQueryList {
  elemMatch: sitePageConnectionPluginCreatorPackageJsonPeerDependenciesInputObject
}

input sitePageConnectionPluginCreatorPackageJsonPeerDependenciesVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPackageJsonVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginFilepathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsBackgroundColorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsDisplayQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsIconQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsInputObject {
  plugins: sitePageConnectionPluginCreatorPluginOptionsPluginsQueryList
  path: sitePageConnectionPluginCreatorPluginOptionsPathQueryString
  name: sitePageConnectionPluginCreatorPluginOptionsNameQueryString
  maxWidth: sitePageConnectionPluginCreatorPluginOptionsMaxWidthQueryInteger
  wrapperStyle: sitePageConnectionPluginCreatorPluginOptionsWrapperStyleQueryString
  short_name: sitePageConnectionPluginCreatorPluginOptionsShortNameQueryString
  start_url: sitePageConnectionPluginCreatorPluginOptionsStartUrlQueryString
  background_color: sitePageConnectionPluginCreatorPluginOptionsBackgroundColorQueryString
  theme_color: sitePageConnectionPluginCreatorPluginOptionsThemeColorQueryString
  display: sitePageConnectionPluginCreatorPluginOptionsDisplayQueryString
  icon: sitePageConnectionPluginCreatorPluginOptionsIconQueryString
  pathToConfigModule: sitePageConnectionPluginCreatorPluginOptionsPathToConfigModuleQueryString
  pathCheck: sitePageConnectionPluginCreatorPluginOptionsPathCheckQueryBoolean
}

input sitePageConnectionPluginCreatorPluginOptionsMaxWidthQueryInteger {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input sitePageConnectionPluginCreatorPluginOptionsNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsPathCheckQueryBoolean {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

input sitePageConnectionPluginCreatorPluginOptionsPathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsPathToConfigModuleQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsIdQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsInputObject {
  resolve: sitePageConnectionPluginCreatorPluginOptionsPluginsResolveQueryString
  id: sitePageConnectionPluginCreatorPluginOptionsPluginsIdQueryString
  name: sitePageConnectionPluginCreatorPluginOptionsPluginsNameQueryString
  version: sitePageConnectionPluginCreatorPluginOptionsPluginsVersionQueryString
  pluginOptions: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsInputObject
  pluginFilepath: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginFilepathQueryString
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginFilepathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsInputObject {
  maxWidth: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger
  wrapperStyle: sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsWrapperStyleQueryString
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsPluginOptionsWrapperStyleQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsQueryList {
  elemMatch: sitePageConnectionPluginCreatorPluginOptionsPluginsInputObject
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsResolveQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsPluginsVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsShortNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsStartUrlQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsThemeColorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorPluginOptionsWrapperStyleQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorResolveQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorSsrApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionPluginCreatorVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageConnectionSort {
  fields: [SitePageConnectionSortByFieldsEnum]!
  order: [sitePageConnectionSortOrderValues] = [ASC]
}

enum SitePageConnectionSortByFieldsEnum {
  jsonName
  internalComponentName
  path
  component
  componentChunkName
  context___slug
  context___previous___fields
  context___previous___frontmatter
  context___next___fields
  context___next___frontmatter
  pluginCreator___NODE
  pluginCreatorId
  componentPath
  id
  internal___type
  internal___contentDigest
  internal___description
  internal___owner
}

enum sitePageConnectionSortOrderValues {
  ASC
  DESC
}

input sitePageContextInputObject {
  slug: sitePageContextSlugQueryString
  previous: sitePageContextPreviousInputObject
  next: sitePageContextNextInputObject
}

input sitePageContextNextFieldsInputObject {
  slug: sitePageContextNextFieldsSlugQueryString
}

input sitePageContextNextFieldsSlugQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageContextNextFrontmatterInputObject {
  title: sitePageContextNextFrontmatterTitleQueryString
}

input sitePageContextNextFrontmatterTitleQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageContextNextInputObject {
  fields: sitePageContextNextFieldsInputObject
  frontmatter: sitePageContextNextFrontmatterInputObject
}

input sitePageContextPreviousFieldsInputObject {
  slug: sitePageContextPreviousFieldsSlugQueryString
}

input sitePageContextPreviousFieldsSlugQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageContextPreviousFrontmatterInputObject {
  title: sitePageContextPreviousFrontmatterTitleQueryString
}

input sitePageContextPreviousFrontmatterTitleQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageContextPreviousInputObject {
  fields: sitePageContextPreviousFieldsInputObject
  frontmatter: sitePageContextPreviousFrontmatterInputObject
}

input sitePageContextSlugQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

enum sitePageDistinctEnum {
  jsonName
  internalComponentName
  path
  component
  componentChunkName
  context___slug
  context___previous___fields
  context___previous___frontmatter
  context___next___fields
  context___next___frontmatter
  pluginCreator___NODE
  pluginCreatorId
  componentPath
  id
  internal___type
  internal___contentDigest
  internal___description
  internal___owner
}

"""An edge in a connection."""
type SitePageEdge {
  """The item at the end of the edge"""
  node: SitePage

  """The next edge in the connection"""
  next: SitePage

  """The previous edge in the connection"""
  previous: SitePage
}

"""A connection to a list of items."""
type sitePageGroupConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [sitePageGroupConnectionEdge]
  field: String
  fieldValue: String
  totalCount: Int
}

"""An edge in a connection."""
type sitePageGroupConnectionEdge {
  """The item at the end of the edge"""
  node: SitePage

  """The next edge in the connection"""
  next: SitePage

  """The previous edge in the connection"""
  previous: SitePage
}

enum sitePageGroupEnum {
  jsonName
  internalComponentName
  path
  component
  componentChunkName
  context___slug
  context___previous___fields
  context___previous___frontmatter
  context___next___fields
  context___next___frontmatter
  pluginCreator___NODE
  pluginCreatorId
  componentPath
  id
  internal___type
  internal___contentDigest
  internal___description
  internal___owner
}

input sitePageIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageInternalComponentNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageInternalDescriptionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageInternalInputObject_2 {
  type: sitePageInternalTypeQueryString_2
  contentDigest: sitePageInternalContentDigestQueryString_2
  description: sitePageInternalDescriptionQueryString
  owner: sitePageInternalOwnerQueryString_2
}

input sitePageInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePageJsonNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorBrowserApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorIdQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorInputObject {
  resolve: sitePagePluginCreatorResolveQueryString
  id: sitePagePluginCreatorIdQueryString
  name: sitePagePluginCreatorNameQueryString
  version: sitePagePluginCreatorVersionQueryString
  pluginOptions: sitePagePluginCreatorPluginOptionsInputObject
  nodeAPIs: sitePagePluginCreatorNodeApIsQueryList
  browserAPIs: sitePagePluginCreatorBrowserApIsQueryList
  ssrAPIs: sitePagePluginCreatorSsrApIsQueryList
  pluginFilepath: sitePagePluginCreatorPluginFilepathQueryString
  packageJson: sitePagePluginCreatorPackageJsonInputObject
  internal: sitePagePluginCreatorInternalInputObject
}

input sitePagePluginCreatorInternalContentDigestQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorInternalInputObject {
  contentDigest: sitePagePluginCreatorInternalContentDigestQueryString
  type: sitePagePluginCreatorInternalTypeQueryString
  owner: sitePagePluginCreatorInternalOwnerQueryString
}

input sitePagePluginCreatorInternalOwnerQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorInternalTypeQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorNodeApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPackageJsonAuthorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPackageJsonDependenciesInputObject {
  name: sitePagePluginCreatorPackageJsonDependenciesNameQueryString
  version: sitePagePluginCreatorPackageJsonDependenciesVersionQueryString
}

input sitePagePluginCreatorPackageJsonDependenciesNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPackageJsonDependenciesQueryList {
  elemMatch: sitePagePluginCreatorPackageJsonDependenciesInputObject
}

input sitePagePluginCreatorPackageJsonDependenciesVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPackageJsonDescriptionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPackageJsonDevDependenciesInputObject {
  name: sitePagePluginCreatorPackageJsonDevDependenciesNameQueryString
  version: sitePagePluginCreatorPackageJsonDevDependenciesVersionQueryString
}

input sitePagePluginCreatorPackageJsonDevDependenciesNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPackageJsonDevDependenciesQueryList {
  elemMatch: sitePagePluginCreatorPackageJsonDevDependenciesInputObject
}

input sitePagePluginCreatorPackageJsonDevDependenciesVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPackageJsonInputObject {
  name: sitePagePluginCreatorPackageJsonNameQueryString
  description: sitePagePluginCreatorPackageJsonDescriptionQueryString
  version: sitePagePluginCreatorPackageJsonVersionQueryString
  main: sitePagePluginCreatorPackageJsonMainQueryString
  author: sitePagePluginCreatorPackageJsonAuthorQueryString
  license: sitePagePluginCreatorPackageJsonLicenseQueryString
  dependencies: sitePagePluginCreatorPackageJsonDependenciesQueryList
  devDependencies: sitePagePluginCreatorPackageJsonDevDependenciesQueryList
  peerDependencies: sitePagePluginCreatorPackageJsonPeerDependenciesQueryList
  keywords: sitePagePluginCreatorPackageJsonKeywordsQueryList
}

input sitePagePluginCreatorPackageJsonKeywordsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPackageJsonLicenseQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPackageJsonMainQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPackageJsonNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPackageJsonPeerDependenciesInputObject {
  name: sitePagePluginCreatorPackageJsonPeerDependenciesNameQueryString
  version: sitePagePluginCreatorPackageJsonPeerDependenciesVersionQueryString
}

input sitePagePluginCreatorPackageJsonPeerDependenciesNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPackageJsonPeerDependenciesQueryList {
  elemMatch: sitePagePluginCreatorPackageJsonPeerDependenciesInputObject
}

input sitePagePluginCreatorPackageJsonPeerDependenciesVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPackageJsonVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginFilepathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsBackgroundColorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsDisplayQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsIconQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsInputObject {
  plugins: sitePagePluginCreatorPluginOptionsPluginsQueryList
  path: sitePagePluginCreatorPluginOptionsPathQueryString
  name: sitePagePluginCreatorPluginOptionsNameQueryString
  maxWidth: sitePagePluginCreatorPluginOptionsMaxWidthQueryInteger
  wrapperStyle: sitePagePluginCreatorPluginOptionsWrapperStyleQueryString
  short_name: sitePagePluginCreatorPluginOptionsShortNameQueryString
  start_url: sitePagePluginCreatorPluginOptionsStartUrlQueryString
  background_color: sitePagePluginCreatorPluginOptionsBackgroundColorQueryString
  theme_color: sitePagePluginCreatorPluginOptionsThemeColorQueryString
  display: sitePagePluginCreatorPluginOptionsDisplayQueryString
  icon: sitePagePluginCreatorPluginOptionsIconQueryString
  pathToConfigModule: sitePagePluginCreatorPluginOptionsPathToConfigModuleQueryString
  pathCheck: sitePagePluginCreatorPluginOptionsPathCheckQueryBoolean
}

input sitePagePluginCreatorPluginOptionsMaxWidthQueryInteger {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input sitePagePluginCreatorPluginOptionsNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsPathCheckQueryBoolean {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

input sitePagePluginCreatorPluginOptionsPathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsPathToConfigModuleQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsPluginsIdQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsPluginsInputObject {
  resolve: sitePagePluginCreatorPluginOptionsPluginsResolveQueryString
  id: sitePagePluginCreatorPluginOptionsPluginsIdQueryString
  name: sitePagePluginCreatorPluginOptionsPluginsNameQueryString
  version: sitePagePluginCreatorPluginOptionsPluginsVersionQueryString
  pluginOptions: sitePagePluginCreatorPluginOptionsPluginsPluginOptionsInputObject
  pluginFilepath: sitePagePluginCreatorPluginOptionsPluginsPluginFilepathQueryString
}

input sitePagePluginCreatorPluginOptionsPluginsNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsPluginsPluginFilepathQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsPluginsPluginOptionsInputObject {
  maxWidth: sitePagePluginCreatorPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger
  wrapperStyle: sitePagePluginCreatorPluginOptionsPluginsPluginOptionsWrapperStyleQueryString
}

input sitePagePluginCreatorPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input sitePagePluginCreatorPluginOptionsPluginsPluginOptionsWrapperStyleQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsPluginsQueryList {
  elemMatch: sitePagePluginCreatorPluginOptionsPluginsInputObject
}

input sitePagePluginCreatorPluginOptionsPluginsResolveQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsPluginsVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsShortNameQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsStartUrlQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsThemeColorQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorPluginOptionsWrapperStyleQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorResolveQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorSsrApIsQueryList {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePagePluginCreatorVersionQueryString {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePathPrefixQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

"""Node of type SitePlugin"""
type SitePlugin implements Node {
  """The id of this node."""
  id: ID!

  """The parent of this node."""
  parent: Node

  """The children of this node."""
  children: [Node]
  resolve: String
  name: String
  version: String
  pluginOptions: pluginOptions_3
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  packageJson: packageJson_2
  internal: internal_9
}

input sitePluginBrowserApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

"""A connection to a list of items."""
type SitePluginConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SitePluginEdge]
  totalCount: Int
  distinct(field: sitePluginDistinctEnum): [String]
  group(skip: Int, limit: Int, field: sitePluginGroupEnum): [sitePluginGroupConnectionConnection]
}

input sitePluginConnectionBrowserApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionInternalInputObject_2 {
  contentDigest: sitePluginConnectionInternalContentDigestQueryString_2
  type: sitePluginConnectionInternalTypeQueryString_2
  owner: sitePluginConnectionInternalOwnerQueryString_2
}

input sitePluginConnectionInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionNodeApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPackageJsonAuthorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPackageJsonDependenciesInputObject_2 {
  name: sitePluginConnectionPackageJsonDependenciesNameQueryString_2
  version: sitePluginConnectionPackageJsonDependenciesVersionQueryString_2
}

input sitePluginConnectionPackageJsonDependenciesNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPackageJsonDependenciesQueryList_2 {
  elemMatch: sitePluginConnectionPackageJsonDependenciesInputObject_2
}

input sitePluginConnectionPackageJsonDependenciesVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPackageJsonDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPackageJsonDevDependenciesInputObject_2 {
  name: sitePluginConnectionPackageJsonDevDependenciesNameQueryString_2
  version: sitePluginConnectionPackageJsonDevDependenciesVersionQueryString_2
}

input sitePluginConnectionPackageJsonDevDependenciesNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPackageJsonDevDependenciesQueryList_2 {
  elemMatch: sitePluginConnectionPackageJsonDevDependenciesInputObject_2
}

input sitePluginConnectionPackageJsonDevDependenciesVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPackageJsonInputObject_2 {
  name: sitePluginConnectionPackageJsonNameQueryString_2
  description: sitePluginConnectionPackageJsonDescriptionQueryString_2
  version: sitePluginConnectionPackageJsonVersionQueryString_2
  main: sitePluginConnectionPackageJsonMainQueryString_2
  author: sitePluginConnectionPackageJsonAuthorQueryString_2
  license: sitePluginConnectionPackageJsonLicenseQueryString_2
  dependencies: sitePluginConnectionPackageJsonDependenciesQueryList_2
  devDependencies: sitePluginConnectionPackageJsonDevDependenciesQueryList_2
  peerDependencies: sitePluginConnectionPackageJsonPeerDependenciesQueryList_2
  keywords: sitePluginConnectionPackageJsonKeywordsQueryList_2
}

input sitePluginConnectionPackageJsonKeywordsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPackageJsonLicenseQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPackageJsonMainQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPackageJsonNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPackageJsonPeerDependenciesInputObject_2 {
  name: sitePluginConnectionPackageJsonPeerDependenciesNameQueryString_2
  version: sitePluginConnectionPackageJsonPeerDependenciesVersionQueryString_2
}

input sitePluginConnectionPackageJsonPeerDependenciesNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPackageJsonPeerDependenciesQueryList_2 {
  elemMatch: sitePluginConnectionPackageJsonPeerDependenciesInputObject_2
}

input sitePluginConnectionPackageJsonPeerDependenciesVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPackageJsonVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginFilepathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsBackgroundColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsDisplayQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsIconQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsInputObject_2 {
  plugins: sitePluginConnectionPluginOptionsPluginsQueryList_2
  path: sitePluginConnectionPluginOptionsPathQueryString_2
  name: sitePluginConnectionPluginOptionsNameQueryString_2
  maxWidth: sitePluginConnectionPluginOptionsMaxWidthQueryInteger_2
  wrapperStyle: sitePluginConnectionPluginOptionsWrapperStyleQueryString_2
  short_name: sitePluginConnectionPluginOptionsShortNameQueryString_2
  start_url: sitePluginConnectionPluginOptionsStartUrlQueryString_2
  background_color: sitePluginConnectionPluginOptionsBackgroundColorQueryString_2
  theme_color: sitePluginConnectionPluginOptionsThemeColorQueryString_2
  display: sitePluginConnectionPluginOptionsDisplayQueryString_2
  icon: sitePluginConnectionPluginOptionsIconQueryString_2
  pathToConfigModule: sitePluginConnectionPluginOptionsPathToConfigModuleQueryString_2
  pathCheck: sitePluginConnectionPluginOptionsPathCheckQueryBoolean_2
}

input sitePluginConnectionPluginOptionsMaxWidthQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input sitePluginConnectionPluginOptionsNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsPathCheckQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

input sitePluginConnectionPluginOptionsPathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsPathToConfigModuleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsPluginsIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsPluginsInputObject_2 {
  resolve: sitePluginConnectionPluginOptionsPluginsResolveQueryString_2
  id: sitePluginConnectionPluginOptionsPluginsIdQueryString_2
  name: sitePluginConnectionPluginOptionsPluginsNameQueryString_2
  version: sitePluginConnectionPluginOptionsPluginsVersionQueryString_2
  pluginOptions: sitePluginConnectionPluginOptionsPluginsPluginOptionsInputObject_2
  pluginFilepath: sitePluginConnectionPluginOptionsPluginsPluginFilepathQueryString_2
}

input sitePluginConnectionPluginOptionsPluginsNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsPluginsPluginFilepathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsPluginsPluginOptionsInputObject_2 {
  maxWidth: sitePluginConnectionPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger_2
  wrapperStyle: sitePluginConnectionPluginOptionsPluginsPluginOptionsWrapperStyleQueryString_2
}

input sitePluginConnectionPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input sitePluginConnectionPluginOptionsPluginsPluginOptionsWrapperStyleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsPluginsQueryList_2 {
  elemMatch: sitePluginConnectionPluginOptionsPluginsInputObject_2
}

input sitePluginConnectionPluginOptionsPluginsResolveQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsPluginsVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsShortNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsStartUrlQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsThemeColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionPluginOptionsWrapperStyleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionResolveQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionSort {
  fields: [SitePluginConnectionSortByFieldsEnum]!
  order: [sitePluginConnectionSortOrderValues] = [ASC]
}

enum SitePluginConnectionSortByFieldsEnum {
  resolve
  id
  name
  version
  pluginOptions___plugins
  pluginOptions___path
  pluginOptions___name
  pluginOptions___maxWidth
  pluginOptions___wrapperStyle
  pluginOptions___short_name
  pluginOptions___start_url
  pluginOptions___background_color
  pluginOptions___theme_color
  pluginOptions___display
  pluginOptions___icon
  pluginOptions___pathToConfigModule
  pluginOptions___pathCheck
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  packageJson___name
  packageJson___description
  packageJson___version
  packageJson___main
  packageJson___author
  packageJson___license
  packageJson___dependencies
  packageJson___devDependencies
  packageJson___peerDependencies
  packageJson___keywords
  internal___contentDigest
  internal___type
  internal___owner
}

enum sitePluginConnectionSortOrderValues {
  ASC
  DESC
}

input sitePluginConnectionSsrApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginConnectionVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

enum sitePluginDistinctEnum {
  resolve
  id
  name
  version
  pluginOptions___plugins
  pluginOptions___path
  pluginOptions___name
  pluginOptions___maxWidth
  pluginOptions___wrapperStyle
  pluginOptions___short_name
  pluginOptions___start_url
  pluginOptions___background_color
  pluginOptions___theme_color
  pluginOptions___display
  pluginOptions___icon
  pluginOptions___pathToConfigModule
  pluginOptions___pathCheck
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  packageJson___name
  packageJson___description
  packageJson___version
  packageJson___main
  packageJson___author
  packageJson___license
  packageJson___dependencies
  packageJson___devDependencies
  packageJson___peerDependencies
  packageJson___keywords
  internal___contentDigest
  internal___type
  internal___owner
}

"""An edge in a connection."""
type SitePluginEdge {
  """The item at the end of the edge"""
  node: SitePlugin

  """The next edge in the connection"""
  next: SitePlugin

  """The previous edge in the connection"""
  previous: SitePlugin
}

"""A connection to a list of items."""
type sitePluginGroupConnectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [sitePluginGroupConnectionEdge]
  field: String
  fieldValue: String
  totalCount: Int
}

"""An edge in a connection."""
type sitePluginGroupConnectionEdge {
  """The item at the end of the edge"""
  node: SitePlugin

  """The next edge in the connection"""
  next: SitePlugin

  """The previous edge in the connection"""
  previous: SitePlugin
}

enum sitePluginGroupEnum {
  resolve
  id
  name
  version
  pluginOptions___plugins
  pluginOptions___path
  pluginOptions___name
  pluginOptions___maxWidth
  pluginOptions___wrapperStyle
  pluginOptions___short_name
  pluginOptions___start_url
  pluginOptions___background_color
  pluginOptions___theme_color
  pluginOptions___display
  pluginOptions___icon
  pluginOptions___pathToConfigModule
  pluginOptions___pathCheck
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  packageJson___name
  packageJson___description
  packageJson___version
  packageJson___main
  packageJson___author
  packageJson___license
  packageJson___dependencies
  packageJson___devDependencies
  packageJson___peerDependencies
  packageJson___keywords
  internal___contentDigest
  internal___type
  internal___owner
}

input sitePluginIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginInternalContentDigestQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginInternalInputObject_2 {
  contentDigest: sitePluginInternalContentDigestQueryString_2
  type: sitePluginInternalTypeQueryString_2
  owner: sitePluginInternalOwnerQueryString_2
}

input sitePluginInternalOwnerQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginInternalTypeQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginNodeApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPackageJsonAuthorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPackageJsonDependenciesInputObject_2 {
  name: sitePluginPackageJsonDependenciesNameQueryString_2
  version: sitePluginPackageJsonDependenciesVersionQueryString_2
}

input sitePluginPackageJsonDependenciesNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPackageJsonDependenciesQueryList_2 {
  elemMatch: sitePluginPackageJsonDependenciesInputObject_2
}

input sitePluginPackageJsonDependenciesVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPackageJsonDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPackageJsonDevDependenciesInputObject_2 {
  name: sitePluginPackageJsonDevDependenciesNameQueryString_2
  version: sitePluginPackageJsonDevDependenciesVersionQueryString_2
}

input sitePluginPackageJsonDevDependenciesNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPackageJsonDevDependenciesQueryList_2 {
  elemMatch: sitePluginPackageJsonDevDependenciesInputObject_2
}

input sitePluginPackageJsonDevDependenciesVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPackageJsonInputObject_2 {
  name: sitePluginPackageJsonNameQueryString_2
  description: sitePluginPackageJsonDescriptionQueryString_2
  version: sitePluginPackageJsonVersionQueryString_2
  main: sitePluginPackageJsonMainQueryString_2
  author: sitePluginPackageJsonAuthorQueryString_2
  license: sitePluginPackageJsonLicenseQueryString_2
  dependencies: sitePluginPackageJsonDependenciesQueryList_2
  devDependencies: sitePluginPackageJsonDevDependenciesQueryList_2
  peerDependencies: sitePluginPackageJsonPeerDependenciesQueryList_2
  keywords: sitePluginPackageJsonKeywordsQueryList_2
}

input sitePluginPackageJsonKeywordsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPackageJsonLicenseQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPackageJsonMainQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPackageJsonNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPackageJsonPeerDependenciesInputObject_2 {
  name: sitePluginPackageJsonPeerDependenciesNameQueryString_2
  version: sitePluginPackageJsonPeerDependenciesVersionQueryString_2
}

input sitePluginPackageJsonPeerDependenciesNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPackageJsonPeerDependenciesQueryList_2 {
  elemMatch: sitePluginPackageJsonPeerDependenciesInputObject_2
}

input sitePluginPackageJsonPeerDependenciesVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPackageJsonVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginFilepathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsBackgroundColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsDisplayQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsIconQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsInputObject_2 {
  plugins: sitePluginPluginOptionsPluginsQueryList_2
  path: sitePluginPluginOptionsPathQueryString_2
  name: sitePluginPluginOptionsNameQueryString_2
  maxWidth: sitePluginPluginOptionsMaxWidthQueryInteger_2
  wrapperStyle: sitePluginPluginOptionsWrapperStyleQueryString_2
  short_name: sitePluginPluginOptionsShortNameQueryString_2
  start_url: sitePluginPluginOptionsStartUrlQueryString_2
  background_color: sitePluginPluginOptionsBackgroundColorQueryString_2
  theme_color: sitePluginPluginOptionsThemeColorQueryString_2
  display: sitePluginPluginOptionsDisplayQueryString_2
  icon: sitePluginPluginOptionsIconQueryString_2
  pathToConfigModule: sitePluginPluginOptionsPathToConfigModuleQueryString_2
  pathCheck: sitePluginPluginOptionsPathCheckQueryBoolean_2
}

input sitePluginPluginOptionsMaxWidthQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input sitePluginPluginOptionsNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsPathCheckQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

input sitePluginPluginOptionsPathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsPathToConfigModuleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsPluginsIdQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsPluginsInputObject_2 {
  resolve: sitePluginPluginOptionsPluginsResolveQueryString_2
  id: sitePluginPluginOptionsPluginsIdQueryString_2
  name: sitePluginPluginOptionsPluginsNameQueryString_2
  version: sitePluginPluginOptionsPluginsVersionQueryString_2
  pluginOptions: sitePluginPluginOptionsPluginsPluginOptionsInputObject_2
  pluginFilepath: sitePluginPluginOptionsPluginsPluginFilepathQueryString_2
}

input sitePluginPluginOptionsPluginsNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsPluginsPluginFilepathQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsPluginsPluginOptionsInputObject_2 {
  maxWidth: sitePluginPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger_2
  wrapperStyle: sitePluginPluginOptionsPluginsPluginOptionsWrapperStyleQueryString_2
}

input sitePluginPluginOptionsPluginsPluginOptionsMaxWidthQueryInteger_2 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input sitePluginPluginOptionsPluginsPluginOptionsWrapperStyleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsPluginsQueryList_2 {
  elemMatch: sitePluginPluginOptionsPluginsInputObject_2
}

input sitePluginPluginOptionsPluginsResolveQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsPluginsVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsShortNameQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsStartUrlQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsThemeColorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginPluginOptionsWrapperStyleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginResolveQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginSsrApIsQueryList_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePluginVersionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sitePolyfillQueryBoolean_2 {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

input sitePortQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input siteSiteMetadataAuthorQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input siteSiteMetadataDescriptionQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input siteSiteMetadataInputObject_2 {
  title: siteSiteMetadataTitleQueryString_2
  author: siteSiteMetadataAuthorQueryString_2
  description: siteSiteMetadataDescriptionQueryString_2
  siteUrl: siteSiteMetadataSiteUrlQueryString_2
  social: siteSiteMetadataSocialInputObject_2
}

input siteSiteMetadataSiteUrlQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input siteSiteMetadataSocialInputObject_2 {
  twitter: siteSiteMetadataSocialTwitterQueryString_2
}

input siteSiteMetadataSocialTwitterQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input siteSiteMetadataTitleQueryString_2 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesAspectRatioQueryFloat_3 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input sizesAspectRatioQueryFloat_4 {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input sizesBase64QueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesBase64QueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesOriginalImgQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesOriginalImgQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesOriginalNameQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesOriginalNameQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesPresentationHeightQueryInt_3 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input sizesPresentationHeightQueryInt_4 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input sizesPresentationWidthQueryInt_3 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input sizesPresentationWidthQueryInt_4 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input sizesSizesQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesSizesQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesSrcQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesSrcQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesSrcSetQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesSrcSetQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesSrcSetWebpQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesSrcSetWebpQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesSrcWebpQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesSrcWebpQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesTracedSvgQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesTracedSvgQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input sizesTypeName_3 {
  base64: sizesBase64QueryString_3
  tracedSVG: sizesTracedSvgQueryString_3
  aspectRatio: sizesAspectRatioQueryFloat_3
  src: sizesSrcQueryString_3
  srcSet: sizesSrcSetQueryString_3
  srcWebp: sizesSrcWebpQueryString_3
  srcSetWebp: sizesSrcSetWebpQueryString_3
  sizes: sizesSizesQueryString_3
  originalImg: sizesOriginalImgQueryString_3
  originalName: sizesOriginalNameQueryString_3
  presentationWidth: sizesPresentationWidthQueryInt_3
  presentationHeight: sizesPresentationHeightQueryInt_3
}

input sizesTypeName_4 {
  base64: sizesBase64QueryString_4
  tracedSVG: sizesTracedSvgQueryString_4
  aspectRatio: sizesAspectRatioQueryFloat_4
  src: sizesSrcQueryString_4
  srcSet: sizesSrcSetQueryString_4
  srcWebp: sizesSrcWebpQueryString_4
  srcSetWebp: sizesSrcSetWebpQueryString_4
  sizes: sizesSizesQueryString_4
  originalImg: sizesOriginalImgQueryString_4
  originalName: sizesOriginalNameQueryString_4
  presentationWidth: sizesPresentationWidthQueryInt_4
  presentationHeight: sizesPresentationHeightQueryInt_4
}

type social_2 {
  twitter: String
}

input tableOfContentsQueryString_3 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input tableOfContentsQueryString_4 {
  eq: String
  ne: String
  regex: String
  glob: String
  in: [String]
  nin: [String]
}

input timeToReadQueryInt_3 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input timeToReadQueryInt_4 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

type wordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

input wordCountParagraphsQueryInt_3 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input wordCountParagraphsQueryInt_4 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input wordCountSentencesQueryInt_3 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input wordCountSentencesQueryInt_4 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input wordCountTypeName_3 {
  paragraphs: wordCountParagraphsQueryInt_3
  sentences: wordCountSentencesQueryInt_3
  words: wordCountWordsQueryInt_3
}

input wordCountTypeName_4 {
  paragraphs: wordCountParagraphsQueryInt_4
  sentences: wordCountSentencesQueryInt_4
  words: wordCountWordsQueryInt_4
}

input wordCountWordsQueryInt_3 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input wordCountWordsQueryInt_4 {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}
